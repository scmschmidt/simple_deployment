#!/bin/bash

set -e
LANG=C

# Include shared functions.
. "${0%*${0##*/}}include"

# Check for baseline snapshot, which MUST exist.
amount_baseline_snapshots=$(snapper --csvout  -c root list --disable-used-space --columns description | grep '^BASELINE$' | wc -l)
case ${amount_baseline_snapshots} in 
    0)  exit_on_error 'No BASELINE snapshot found! Exiting.'
        ;;
    1)  log 'BASELINE snapshot found!'
        ;;
    *)  exit_on_error 'More then one BASELINE snapshot found! Exiting.'
        ;;
esac

# Rollback to the BASELINE snapshot from the running system, if they don't exist already.
amount_rollback_snapshots=$(snapper --csvout  -c root list --disable-used-space --columns description | grep '^simple_baremetal$' | wc -l)
case ${amount_rollback_snapshots} in
    0)  log 'No recovery snapshots found. Do rollback to BASELINE.'
        set_status  baseline_rollback_planned
        target=$(snapper --csvout  -c root list --disable-used-space --columns number,description | grep ',BASELINE$' | cut -d',' -f1)
        log "BASELINE rollback to snapshot #${target}."
        output=$(snapper -c root rollback -d 'simple_baremetal' ${target} 2>&1)
        rc=$?
        log "${output}"
        if [ ${rc} -eq 0 ] ; then
            recovery_snapshot=$(grep 'Creating read-only snapshot of current system.' <<< "${output}" | sed 's/[^0-9]//g')
            working_snapshot=$(grep 'Setting default subvolume to snapshot' <<< "${output}" | sed 's/[^0-9]//g') 
            log "Recovery snapshot: ${recovery_snapshot}   Working snapshot: ${working_snapshot}"
            echo "${recovery_snapshot}" > "${recovery_snapshot_file}"
            echo "${working_snapshot}" > "${working_snapshot_file}"
            set_status  baseline_rollback_done
        else
            set_status  baseline_rollback_failed
            exit ${rc}
        fi
        ;;
    2)  log 'Two recovery snapshots found. Rollback already done. Skipping creation.'
        ;;
    *)  exit_on_error "${amount_rollback_snapshots} recovery snapshots found! Something is wrong. Exiting."
        ;;
esac

# Bye.
exit 0