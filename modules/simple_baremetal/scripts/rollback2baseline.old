#!/bin/bash

set -e
LANG=C

# Include shared functions.
#. "${0%*${0##*/}}include"
. /tmp/scripts/include

# Get current status.
status=$(< "${status_file}")

# We rollback only if the status is empty. A status of baseline_set, means we have done it already.
[ "${status}" == 'baseline_set' ] && { log "Rollback already done." ; exit 0 ; }
[ -n "${status}" ] && exit_on_error "Invalid status: ${status}"

# Check for baseline snapshot, which MUST exist.
count_baseline=$(snapper --csvout -c root list --columns description | grep '^BASELINE$' | wc -l)
case ${count_baseline} in
    0)  echo 'baseline_ss_failure' > "${status_file}"
        exit_on_error 'No BASELINE snapshot found! Exiting.'
        ;;
    1)  log 'BASELINE snapshot found.'
        ;;
    *)  echo 'baseline_ss_failure' > "${status_file}"
        exit_on_error 'More then one BASELINE snapshots found! Exiting.'
        ;;
esac

# Update snapshot variables and remember the active snapshot for recovery.
update_ss_vars
echo "${ss_active}" > "${recovery_snapshot_file}"

# Rollback to BASELINE snapshot and save the number of the working BASELINE snapshot (read-write copy).
if [ -z "${ss_baseline}" ] ; then    # double safety; should never succeed
    echo 'baseline_ss_failure' > "${status_file}"
    exit_on_error "No BASELINE snapshot found!"   
fi
output=$(LANG=C snapper -c root rollback -d 'BASELINE (working)' ${ss_baseline})
rc=$?
if [ ${rc} -eq 0 ] ; then
    surplus_snapshot=$(grep 'Creating read-only snapshot of current system.' <<< "${output}" | sed 's/[^0-9]//g')
    working_snapshot=$(grep 'Setting default subvolume to snapshot' <<< "${output}" | sed 's/[^0-9]//g') 
    log "Working BASELINE snapshot: ${working_snapshot}  Status: baseline_set"
    echo "${working_snapshot}" > "${working_snapshot_file}"
    echo 'baseline_set' > "${status_file}"
    snapper -c root delete ${surplus_snapshot} || :  # failure is not relevant
else
    log 'Status: baseline_failed'
    echo 'baseline_failed' > "${status_file}" 
fi

# Bye.
exit ${rc}
